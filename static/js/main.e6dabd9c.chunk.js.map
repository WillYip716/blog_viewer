{"version":3,"sources":["components/commentfield.js","components/post.js","components/home.js","components/about.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["CommentField","props","onChange","e","setState","target","name","value","onSubmit","preventDefault","state","author","comment","axios","post","postid","content","then","result","commentlist","comments","push","data","loading","get","this","res","map","c","index","key","timestamp","type","className","React","Component","Post","posts","match","params","id","title","article","Home","filter","published","to","_id","About","Navbar","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6dabd9c.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios';\n\nclass CommentField extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            loading: true,\n            comments: [],\n            author: \"\",\n            comment: \"\"\n        };\n    }\n\n    componentDidMount() {\n        axios.get('https://gentle-reaches-06177.herokuapp.com/posts/'+this.props.postid+'/comments')\n          .then(res => {\n            const comments = res.data;\n            this.setState((state) => ({\n                loading: false,\n                comments: comments\n            }));  \n          })\n    }\n\n    onChange = (e) => {\n        /*\n            Because we named the inputs to match their\n            corresponding values in state, it's\n            super easy to update the state\n        */\n        this.setState({ [e.target.name]: e.target.value });\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        // get our form data out of state\n        const { author, comment } = this.state;\n\n        axios.post('https://gentle-reaches-06177.herokuapp.com/posts/'+this.props.postid+'/comment', { author, content:comment})\n            .then((result) => {\n                const commentlist = this.state.comments;\n                commentlist.push(result.data);\n                this.setState((state) => ({\n                    comments: commentlist,\n                    author: \"\",\n                    comment: \"\"\n                })); \n        });\n    }\n\n    render() {\n        const { author, comment } = this.state;\n        return (\n            <section>\n                \n                {this.state.comments.map((c,index) => (\n                    <div key={index}>\n                        <p>{c.content}</p>\n                        <p>{c.author}</p>\n                        <p>{c.timestamp}</p>\n                    </div>\n                ))}\n                \n                <form onSubmit={this.onSubmit}>\n                    <label>Name:</label>\n                    <input\n                        type=\"text\"\n                        name=\"author\"\n                        value={author}\n                        onChange={this.onChange}\n                    />\n                    <label>Comment:</label>\n                    <textarea\n                        className=\"article_input\"\n                        type=\"text\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={this.onChange}\n                    />               \n                    <button type=\"submit\">Submit</button>\n                </form>\n            </section>       \n        );\n    }\n}\n\nexport default CommentField;","import React from 'react'\nimport axios from 'axios';\nimport CommentField from './commentfield';\n\n\nclass Post extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            loading: true,\n            posts: []\n        };\n    }\n\n    componentDidMount() {\n        axios.get('https://gentle-reaches-06177.herokuapp.com/posts/'+this.props.match.params.id)\n          .then(res => {\n            const posts = res.data;\n            this.setState((state) => ({\n                loading: false,\n                posts: posts\n            }));  \n          })\n    }\n\n    render(){\n        return(\n            <div>\n            {this.state.loading        \n                ? <h1>Post Loading</h1>\n                : <div>\n                    <h1>{this.state.posts.title}</h1>\n                    <p>{this.state.posts.article}</p>\n                    <p>{this.state.posts.timestamp}</p> \n                    <CommentField key={this.props.match.params.id} postid={this.props.match.params.id}/>   \n                  </div>\n                  \n            }\n            \n                \n            </div>\n        )\n    }\n    \n}\nexport default Post;","import React from 'react'\nimport axios from 'axios';\nimport {Link} from 'react-router-dom'\n\nclass Home extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state ={\n            loading: true,\n            posts: []\n        };\n    }\n\n    componentDidMount() {\n        axios.get('https://gentle-reaches-06177.herokuapp.com/posts')\n          .then(res => {\n            const posts = res.data.filter((post) => post.published);\n            this.setState((state) => ({\n                loading: false,\n                posts: posts\n            }));  \n          })\n    }\n\n    render(){\n        return(\n            <div>\n            {this.state.loading        \n                ? <h1>Hello i am loading</h1>\n                : <div>\n                    {this.state.posts.map((post) => (\n                        <Link to={`/post/${post._id}`} key={post._id}>\n                            <h1>{post.title}</h1>\n                            <p>{post.timestamp}</p>\n                        </Link>\n                    ))}\n                </div>     \n            }\n            \n                \n            </div>\n        )\n    }\n    \n}\n\nexport default Home;","import React from 'react'\n\nfunction About(){\n    return(\n        <div>\n            <h1>About</h1>\n            <p>This site was written in react and using api written in express/nodejs with mongodb as a database</p>\n        </div>\n    )\n}\n\nexport default About;","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nfunction Navbar(){\n    return(\n        <ul>\n            <li>\n                <Link to='/'>Home</Link>\n            </li>\n            <li>\n                <Link to='/about'>About</Link>\n            </li>\n        </ul>\n    )   \n}\n\nexport default Navbar;","import React from 'react';\nimport {Route} from 'react-router-dom';\nimport Post from './components/post';\nimport Home from './components/home';\nimport About from './components/about';\nimport Navbar from './components/navbar'\n\n\nfunction App() {\n    return (\n        <div>\n            <Navbar/>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about\" exact component={About} />\n            <Route path=\"/post/:id\" exact component={Post} />\n        </div>\n            \n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}